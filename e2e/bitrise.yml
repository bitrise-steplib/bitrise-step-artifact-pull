format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # Shared envs for every test workflow
  - BITRISEIO_FINISHED_STAGES: |-
        [{
            "id": "fb96d509-3966-4ca7-acf2-da596cb4a895",
            "name": "stage-1",
            "workflows": [{
                "external_id": "70bbdfd1-96d5-447c-9731-20da9312643c",
                "finished_at": "2022-05-24T20:39:06Z",
                "id": "44b69b43-3a3e-474b-a133-99717c96d719",
                "name": "placeholder",
                "started_at": "2022-05-24T20:39:04Z",
                "status": "succeeded"
            }, {
                "external_id": "3daa3d92-6d7a-4791-928a-b83506881ecd",
                "finished_at": "2022-05-24T20:38:33Z",
                "id": "5b8e99f4-5836-4eb5-bbc3-61fff4410919",
                "name": "textfile_generator",
                "started_at": "2022-05-24T20:38:09Z",
                "status": "succeeded"
            }]
        }, {
            "id": "e9ab9871-3a50-47d0-88f7-33dbceff7e87",
            "name": "stage-2",
            "workflows": [{
                "external_id": "2f031c63-ed6c-4a26-aff1-57b00ed2f8ba",
                "finished_at": "2022-05-24T20:41:26Z",
                "id": "f1c01cf2-ebcc-4db6-a19c-dfab20762b06",
                "name": "deployer",
                "started_at": "2022-05-24T20:40:47Z",
                "status": "succeeded"
            }, {
                "external_id": "a9d6148e-59e1-417e-99a0-49e5dd014f85",
                "finished_at": "2022-05-24T20:40:34Z",
                "id": "1730a356-6a32-4b77-807b-4a6f587fee33",
                "name": "textfile_generator",
                "started_at": "2022-05-24T20:40:15Z",
                "status": "succeeded"
            }]
        }]
  - BITRISE_APP_SLUG: b520099804d7e71a
  - BITRISE_AUTH_SERVICE_ARTIFACT_PULL_CLIENT_SECRET: $BITRISE_AUTH_SERVICE_ARTIFACT_PULL_CLIENT_SECRET

workflows:

  test_download_all_artifacts_of_build:
    before_run:
    - _setup
    steps:
    - path::./:
        title: Execute step
        inputs:
        - verbose: true
        - artifact_sources: .*
        - bitrise_api_base_url: https://api.bitrise.io
    - script:
        title: Validate downloaded artifacts
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            IFS='|' read -ra FILES <<< "$BITRISE_ARTIFACT_PATHS"
            for i in "${FILES[@]}"; do
              # process "$i"
              if [ ! -f $i ]; then
                echo "$i not found"
                exit 1
              fi
            done

            array=( "example.csv" "export_options.plist" "test.json" "xcode-test-results-ios-simple-objc.html" "lipsum.txt" "generated_text_file.txt" "Test.xcresult.zip" "ios-simple-objcTests.ipa" "cat-illustration@3x.png" "xcodebuild-archive.log" "app-release-unsigned.apk")
            for i in "${array[@]}"
            do
              if [[ "$BITRISE_ARTIFACT_PATHS" != *"$i"* ]]; then
                echo "BITRISE_ARTIFACT_PATHS not contains the $i file"
                exit 1
              fi
            done


  test_download_specific_stage_artifacts:
    before_run:
    - _setup
    steps:
    - path::./:
        title: Execute step
        inputs:
        - verbose: true
        - artifact_sources: stage-1\..*
        - bitrise_api_base_url: https://api.bitrise.io
    - script:
        title: Validate downloaded artifacts
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            IFS='|' read -ra FILES <<< "$BITRISE_ARTIFACT_PATHS"
            for i in "${FILES[@]}"; do
              # process "$i"
              if [ ! -f $i ]; then
                echo "$i not found"
                exit 1
              fi
            done

            fc=$(ls $BITRISE_ARTIFACT_PATHS | wc -l | xargs)
            if [ $fc -gt 1 ]; then
              echo "There are more than 1 files"
              exit 1
            fi

            if [[ -z "${BITRISE_ARTIFACT_PATHS}" ]]; then
              echo "Exported BITRISE_ARTIFACT_PATHS output variable does not exist"
              exit 1
            fi

            array=( "generated_text_file.txt")
            for i in "${array[@]}"
            do
              if [[ "$BITRISE_ARTIFACT_PATHS" != *"$i"* ]]; then
                echo "BITRISE_ARTIFACT_PATHS not contains the $i file"
                exit 1
              fi
            done


  test_export_output_variables_based_on_patterns:
    before_run:
    - _setup
    steps:
    - path::./:
        title: Execute step
        inputs:
        - verbose: true
        - artifact_sources: .*
        - export_map: |-
              TXT_FILES: .*\.txt
              APK_FILES: .*\.apk
        - bitrise_api_base_url: https://api.bitrise.io
    - script:
        title: Validate downloaded artifacts
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            if [[ -z "${TXT_FILES}" ]]; then
                echo "Exported $TXT_FILES output variable does not exist"
                exit 1
            fi

            if [[ -z "${APK_FILES}" ]]; then
                echo "Exported $APK_FILES output variable does not exist"
                exit 1
            fi

            IFS='|' read -ra FILES <<< "$TXT_FILES"
            for i in "${FILES[@]}"; do
                # process "$i"
                if [ ! -f $i ]; then
                    echo "$i not found"
                    exit 1
                fi
            done

            IFS='|' read -ra FILES <<< "$APK_FILES"
            for i in "${FILES[@]}"; do
                # process "$i"
                if [ ! -f $i ]; then
                    echo "$i not found"
                    exit 1
                fi
            done

            array=( "lipsum.txt" "generated_text_file.txt" )
            for i in "${array[@]}"
            do
                if [[ "$TXT_FILES" != *"$i"* ]]; then
                    echo "$TXT_FILES not contains the $i file"
                    exit 1
                fi
            done

            array=( "app-release-unsigned.apk" )
            for i in "${array[@]}"
            do
              if [[ "$APK_FILES" != *"$i"* ]]; then
                  echo "$APK_FILES not contains the $i file"
                  exit 1
              fi
            done
  _setup:
    steps:
    - script:
        title: Get access token
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex

            json_response=$(curl --fail -X POST https://auth.services.bitrise.dev/auth/realms/bitrise-services/protocol/openid-connect/token -k \
                --data "client_id=artifact-pull" \
                --data "client_secret=$BITRISE_AUTH_SERVICE_ARTIFACT_PULL_CLIENT_SECRET" \
                --data "grant_type=urn:ietf:params:oauth:grant-type:uma-ticket" \
                --data "scope=build_artifact:read build:read app:read" \
                --data "claim_token=eyJidWlsZF9pZHMiOlsiNzNkMzNmYjUtMzVjNi00OTVmLWJkODAtMDE1YWU2ODFkYjMzIiwiMzk0MDRiZWUtNTJiYS00Y2EyLTg1MDgtOTE0ODllN2Y2YWZhIiwiZWQwZGEwY2YtNjZjYy00MTA5LWIyM2YtOGExNTZkNjFiMGMzIiwiMDUxMzBjZTQtODI1Yi00Y2ExLWE5YmUtNGY1NDQxM2U1ZGNkIl0sInBpcGVsaW5lX2lkIjpbIjM2ZTg1NDBkLTQxYzctNDNjZS05NzRiLTgyNTQ5OTc2OTkxZSJdfQ==" \
                --data "claim_token_format=urn:ietf:params:oauth:token-type:jwt" \
                --data "audience=bitrise-api")

            auth_token=$(echo $json_response | jq -r .access_token)

            envman add --key BITRISEIO_ARTIFACT_PULL_TOKEN --value $auth_token

    - script:
        title: Clean _tmp folder
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            rm -rf ./_artifact_pull
